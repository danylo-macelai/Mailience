# ------------------------------------------------------------------------------
# METADADOS DA APLICACAO
# ------------------------------------------------------------------------------

spring.application.name=@project.name@

# ------------------------------------------------------------------------------
# CONFIGURACOES DO DEVTOOLS
# ------------------------------------------------------------------------------

spring.devtools.add-properties=${VARIABLE_DEVTOOLS_ENABLED:false}
spring.devtools.restart.enabled=${VARIABLE_DEVTOOLS_ENABLED:false}
spring.devtools.livereload.enabled=${VARIABLE_DEVTOOLS_ENABLED:false}
spring.devtools.restart.additional-paths=src/main/resources/

# ------------------------------------------------------------------------------
# BANCO DE DADOS H2 EM MODO FILE
# ------------------------------------------------------------------------------

spring.datasource.url=${SPRING_DATASOURCE_URL:jdbc:h2:file:../mailience-prod;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME:UMlienceBD}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD:PMlienceBD@2025}
spring.datasource.driver-class-name=${SPRING_DATASOURCE_DRIVER:org.h2.Driver}

# ------------------------------------------------------------------------------
# JPA / HIBERNATE
# ------------------------------------------------------------------------------

spring.jpa.open-in-view=false
spring.jpa.generate-ddl=true
spring.jpa.show-sql=false
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.format_sql=false
spring.jpa.properties.hibernate.jdbc.time_zone=UTC
spring.jpa.properties.hibernate.jdbc.fetch_size=500

# ------------------------------------------------------------------------------
# CONFIGURACOES DO JOB
# ------------------------------------------------------------------------------

# Ativar ou desativar o job
# true = job ativo, false = job desativado
mailience.job.enabled=true

# Delay inicial antes da primeira execucao (em segundos)
# O job so inicia depois desse tempo apos o start da aplicacao
mailience.job.initialDelay=10

# Delay fixo entre execucoes (em segundos) - 5 minutos = 300 segundos
# O job espera esse tempo APOS terminar a execucao atual antes de rodar novamente
#
# Dica rapida:
# - Usar 'fixedDelay' faz o job rodar periodicamente com espera entre execucoes
# - Se quiser agendar em horarios especificos, usar cron expression (na anotacao @Scheduled)
# - IMPORTANTE: se 'cron' for definido na anotacao @Scheduled, ele tem prioridade
#   e os atributos 'fixedDelay', 'fixedRate' e 'initialDelay' serao ignorados pelo Spring
mailience.job.fixedDelay=300

# ------------------------------------------------------------------------------
# CONFIGURACOES DO EXECUTOR ASSINCRONO
# ------------------------------------------------------------------------------

# Numero minimo de threads que serao mantidas ativas, mesmo ociosas.
# Deve refletir a carga media esperada do sistema.
mailience.executor.core-pool-size=8

# Numero maximo de threads que o executor pode criar sob alta demanda.
# Define o limite superior de concorrencia do pool.
mailience.executor.maximum-pool-size=10

# Tempo (em segundos) que uma thread ociosa acima do corePoolSize sera mantida viva
# antes de ser finalizada. Ajuda a reduzir consumo em momentos de baixa carga.
mailience.executor.keep-alive-time=60

# Tamanho da fila usada para armazenar tarefas antes de serem executadas.
# Se a fila estiver cheia e todas as threads ativas, novas tarefas seguem a politica de fallback.
mailience.executor.work-queue=500

# Prefixo do nome das threads criadas por esse executor.
# Util para identificar e monitorar no log ou em ferramentas de analise de desempenho.
mailience.executor.name=mailience-worker-

# ------------------------------------------------------------------------------
# CONFIGURACOES DE E-MAIL SMTP
# ------------------------------------------------------------------------------

# Endereco de e-mail usado como remetente padrao nos envios.
mailience.mail.from=${MAILIENCE_MAIL_FROM:no-reply@mailience.com}

# Numero maximo de tentativas de envio por e-mail
mailience.mail.max.attempts=${MAILIENCE_MAIL_MAX_ATTEMPTS:5}

spring.mail.host=${SPRING_MAIL_HOST:smtp.gmail.com}
spring.mail.port=${SPRING_MAIL_PORT:587}
spring.mail.username=${SPRING_MAIL_USERNAME:suporte@mailience.com.br}
spring.mail.password=${SPRING_MAIL_PASSWORD:PMlience@2025}
spring.mail.properties[mail.smtp.auth]=true
spring.mail.properties[mail.smtp.starttls.enable]=true
spring.mail.properties[mail.smtp.connectiontimeout]=5000
spring.mail.properties[mail.smtp.timeout]=3000
spring.mail.properties[mail.smtp.writetimeout]=5000

# ------------------------------------------------------------------------------
# CIRCUITBREAKER (Quebra de Circuito)
# ------------------------------------------------------------------------------

resilience4j.circuitbreaker.instances.emailServiceSend.minimumNumberOfCalls=3
resilience4j.circuitbreaker.instances.emailServiceSend.slidingWindowSize=9
resilience4j.circuitbreaker.instances.emailServiceSend.slidingWindowType=COUNT_BASED
resilience4j.circuitbreaker.instances.emailServiceSend.failureRateThreshold=30
resilience4j.circuitbreaker.instances.emailServiceSend.waitDurationInOpenState=60s
resilience4j.circuitbreaker.instances.emailServiceSend.automaticTransitionFromOpenToHalfOpenEnabled=true
resilience4j.circuitbreaker.instances.emailServiceSend.permittedNumberOfCallsInHalfOpenState=3
resilience4j.circuitbreaker.instances.emailServiceSend.eventConsumerBufferSize=25
resilience4j.circuitbreaker.instances.emailServiceSend.registerHealthIndicator=true
